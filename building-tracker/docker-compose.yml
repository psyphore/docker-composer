# docker compose -f docker-compose.yml up --force-recreate --build -d
# docker compose -f docker-compose.yml build [services]
# docker compose -f docker-compose.yml up --no-deps -d [services]
# docker compose -f docker-compose.yml down

version: "3.9"

services:

  db-2:
    container_name: pg15
    image: postgres:15-alpine
    ports:
      - 5432:5432
    restart: unless-stopped
    volumes:
      - db_2_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
    depends_on:
      - seq-metrics

  graphql-engine:
    container_name: hasura
    image: hasura/graphql-engine
    ports:
    - 1101:8080
    depends_on:
    - db-2
    restart: always
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@db-2:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey

  pg-admin:
    container_name: pgadmin4
    image: dpage/pgadmin4:latest
    ports: 
      - 18:80
    environment: 
      - PGADMIN_DEFAULT_EMAIL=admin@thumbezatech.co.za
      - PGADMIN_DEFAULT_PASSWORD=postgrespassword
    # networks:
    #   - infrastructure
    depends_on: 
      - db-2
    restart: unless-stopped

  seq-metrics:
    container_name: seq
    image: datalust/seq:latest
    volumes:
      - metrics_data:/data
    networks:
      - infrastructure
    ports:
      - ${SEQ_UI_PORT}:80
      - ${SEQ_API_PORT}:5341
    environment:
      - ACCEPT_EULA=$SEQ_ACCEPT_LICENSE_AGREEMENT
    restart: unless-stopped
    # mem_limit: ${SEQ_MEM_LIMIT}
    depends_on: 
      - cache

  cache:
    container_name: cached
    image: redis:alpine
    ports: 
      - ${REDIS_PORT}:6379
    networks:
      - infrastructure
    # command: ${REDIS_ARGS}
    volumes: 
      - cache_data:/data
    restart: unless-stopped

networks:
  infrastructure:
  frontend:
  backend:

volumes:
  db_2_data:
  metrics_data:
  cache_data: